#define F_CPU 8000000UL //XTAL = 8MHZ
#include <avr/io.h>
#include <util/delay.h>
int main() {
	
	DDRB = 0xFF;	//make PORTB an output
	DDRD = 0xFF;	//make PORTD an output
	DDRB |=(1<<DDB1);   // make OC1A an output
	TCCR1A |= 1<<COM1A1 |0 << COM1A0 | 0<<COM1B0 | 0 <<FOC1A | 0<<FOC1B | 1 << WGM11 |  0<<WGM10;  //Prescaler=64
	TCCR1B |= 0 << ICNC1| 0 <<ICES1 | 1 << WGM13 | 1 << WGM12 | 0<<CS12 | 1<<CS11 | 1 << CS10;
	ICR1 = 2499;   //F_CPU / (N * F_pwm) - 1
	ADCSRA=0x87;    //make ADC enable and select  ck/128
	ADMUX=0xC0;    // 2.56V Vref, ADC0 single ended input data will be right-justified
	while(1) {
		PORTB = PORTB | (1<<4);
		_delay_ms(1500);		//75% duty cycle on
		PORTB = PORTB & (~(1<<4));
		_delay_ms(1500);
		ADCSRA |= 1 << ADSC;			// start conversion
		while((ADCSRA & (1<<ADIF)) ==0);		//wait for conversion to finish
		OCR1A=(255*ADC)/1023;       // OCR1A is given the input voltage

		PORTD=ADCL;				//give the low byte to PORT D
		PORTB=ADCH;				//give the high byte to PORTB
	}
	return 0 ;
}
